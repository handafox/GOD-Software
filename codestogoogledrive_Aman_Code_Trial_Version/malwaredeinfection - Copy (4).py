import os
import subprocess
from stat import S_ISREG, ST_CTIME, ST_MODE
import os, sys, time
import mmap

import contextlib

import argparse

from Evtx.Evtx import FileHeader

from Evtx.Views import evtx_file_xml_view
import time
treestore=[]
searchfor='' # nouse
strr=''

searchitem='' # stores the actual suspicious pid

processidtodelete=[]
processname=[]

getparentname=''
count=1

treefromsysmonready=0

deletedbyprocmon=0
deletedbyhandles=0
try:
    os.system(r'mkdir "C:\ransomtesting\internals\quarantine"')
except Exception as ex:
    #print ex
    #print '11111111111'
    pass
normaldeletionbyhandles=0

susphandleprocess=[]
susname=[]
import psutil
os.chdir(r'C:\ransomtesting\internals')
from shutil import copyfile
import datetime
from shutil import copyfile

safepid=[]
badfilesbyname=[]

"""
def cleanqurtend():
    f=open('','r')
    for i in f.readlines():
        i=i.strip()
        winlogon#$2018_02_19$$19_38_23#$#@C:\Windows\System32\winlogon.exe
        i=i.split('#$#@')
        jj=i[0]
        kk=i[1]
        rf=r'C:\Windows\System32'
        if rf in kk:
            kk=kk.split(os.sep)
"""


def quarantinebykillmefun(namegot,pathofproc):
    klj=namegot
    nameofprocecss=pathofproc+os.sep+namegot
    print 'in quarantinebykillmefun',nameofprocecss,klj
    #klj=klj.split(os.sep)
    #klj=klj[len(klj)-1]# get the process name without path
    klj=klj.split('.')
    klj=klj[0]
    klj=str(klj)
    print 'in quarantinebykillmefun',nameofprocecss,klj
    sxs=datetime.datetime.now()
    sxs=str(sxs)
    sxs=sxs.replace('-','_')
    sxs=sxs.replace(':','_')
    sxs=sxs.replace(' ','$$')
    sxs=sxs.split('.')
    sxs=str(sxs[0])
    klj=klj+'#$'+sxs#new processnamewithdate
    copyfile(nameofprocecss,r"C:\ransomtesting\internals\quarantine"+os.sep+klj)
    os.system('del /F /Q /A '+nameofprocecss)
    #print r"C:\ransomtesting\internals\quarantine"+os.sep+klj,'copied'
    gth=open(r"C:\ransomtesting\internals\quarantine\quarantinelog.exe",'a+')
    gth.write(klj+'#$#@'+str(nameofprocecss)+'\n')
    gth.close()

def getsafepid():
    global safepid
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    try:
        for proc in psutil.process_iter():
            try:
                if 'userinit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'winlogon' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'services' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'smss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'svchost' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    if proc.parent().name()=='services.exe':
                        safepid.append(proc.pid)
                        pass
                    else:
                        pass
                    
                    pass
                elif 'csrss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'lsass' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'lsm' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'wininit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'consent' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif 'cmd' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    safepid.append(proc.pid)
                    pass
                elif e==proc.cwd() or uj==proc.cwd():
                    safepid.append(proc.pid)
                    pass
                else:
                    pass
            except Exception as ex:
                #safepid.append(proc.pid)
                #print ex
                pass
        print safepid
    except:
        pass

def placesignedthingsback():
    try:
        from glob import glob
        a=glob(r"C:\ransomtesting\internals\quarantine\*")
        for i in a:
            try:
                os.system(r"C:\ransomtesting\internals\sigcheck64.exe -e -accepteula "+i+r" > C:\ransomtesting\internals\gt1.exe")
                #print r"C:\ransomtesting\internals\sigcheck64.exe -e -accepteula "+i+" > C:\ransomtesting\internals\gt1.exe"
                f=open(r'C:\ransomtesting\internals\gt1.exe','r')
                e=f.read()
                try:
                    e.index('Signed')
                    try:
                        e.index('Microsoft')
                        try:
                            i.index('explorer')
                            copyfile(i, r'C:\windows\explorer.exe')
                        except:
                            pass
                        try:
                            i.index('cmd')
                            copyfile(i, r'C:\windows\system32\cmd.exe')
                        except:
                            pass
                        try:
                            i.index('userinit')
                            copyfile(i, r'C:\Windows\system32\userinit.exe')
                        except:
                            pass
                        try:
                            i.index('winlogon')
                            copyfile(i, r'C:\Windows\system32\winlogon.exe')
                        except:
                            pass
                        try:
                            i.index('smss')
                            copyfile(i, r'C:\Windows\system32\smss.exe')
                        except:
                            pass
                        try:
                            i.index('services')
                            copyfile(i, r'C:\Windows\system32\services.exe')
                        except:
                            pass
                        try:
                            i.index('svchost')
                            copyfile(i, r'C:\Windows\system32\svchost.exe')
                        except:
                            pass
                    except:
                        pass
                except:
                    pass
                
            except:
                pass
    except:
        pass

def placesignedthingsbackv1():
    try:
        from glob import glob
        a=glob(r"C:\ransomtesting\internals\quarantine\*")
        for i in a:
            try:
                os.system(r"C:\ransomtesting\internals\sigcheck64.exe -e -accepteula "+i+r" > C:\ransomtesting\internals\gt1.exe")
                #print r"C:\ransomtesting\internals\sigcheck64.exe -e -accepteula "+i+" > C:\ransomtesting\internals\gt1.exe"
                f=open(r'C:\ransomtesting\internals\gt1.exe','r')
                e=f.read()
                try:
                    e.index('Signed')
                    try:
                        e.index('Microsoft')
                        try:
                            i.index('explorer')
                            copyfile(i, r'C:\windows\explorer.exe')
                        except:
                            pass
                        try:
                            i.index('cmd')
                            copyfile(i, r'C:\windows\system32\cmd.exe')
                        except:
                            pass
                        try:
                            i.index('userinit')
                            copyfile(i, r'C:\Windows\system32\userinit.exe')
                        except:
                            pass
                        try:
                            i.index('winlogon')
                            copyfile(i, r'C:\Windows\system32\winlogon.exe')
                        except:
                            pass
                        try:
                            i.index('smss')
                            copyfile(i, r'C:\Windows\system32\smss.exe')
                        except:
                            pass
                        try:
                            i.index('services')
                            copyfile(i, r'C:\Windows\system32\services.exe')
                        except:
                            pass
                        try:
                            i.index('svchost')
                            copyfile(i, r'C:\Windows\system32\svchost.exe')
                        except:
                            pass
                    except:
                        pass
                except:
                    pass
                
            except:
                pass
    except:
        pass

def signcheckdel(nameofp):
    
    #print 'in signcheckdel',nameofp
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    vv=nameofp.split(os.sep)
    vv=len(vv)
    if 'userinit' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'winlogon' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'services' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'smss' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'svchost' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'csrss' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'lsass' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'lsm' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'consent' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'wininit' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'cmd' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    else:
        try:
            print '-=-='
            print 'deleting bhai..'
            print nameofp,e,uj,vv,'nameofp e uj vv'
            os.system('del /F /Q /A '+nameofp)
            print '-=-='
            pass
        except:
            pass
        return 0

def shouldicopy(nameofp):
    
    #print 'in signcheckdel',nameofp
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    vv=nameofp.split(os.sep)
    vv=len(vv)
    if 'userinit' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'winlogon' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'services' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'smss' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'svchost' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'csrss' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'lsass' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'lsm' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'consent' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'wininit' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif 'cmd' in nameofp and (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    elif (e in nameofp or uj in nameofp) and vv==4:
        return 1
        pass
    else:
        try:
            print '-=-='
            print 'coying bhai bhai..'
            print nameofp,e,uj,vv,'nameofp e uj vv'
            return 6
            print '-=-='
            pass
        except:
            pass
        return 0

def signcheck(nameofp):
    return 0# uncomment it afterwards
    #print 'in signcheck',nameofp
    if 'userinit' in nameofp:
        pass
    elif 'winlogon' in nameofp:
        pass
    elif 'services' in nameofp:
        pass
    elif 'smss' in nameofp:
        pass
    elif 'svchost' in nameofp:
        pass
    else:
        return 0


    

    #return 0 # for now return 0 as signcheck need to be more worked on
    try:
        try:
            nameofp.index('explorer.exe')
            #print 'its explorer.exe'
            return 0
        except:
            pass
        os.system(r"C:\ransomtesting\internals\sigcheck64.exe -e -accepteula "+nameofp+r" > C:\ransomtesting\internals\gt1.exe")
        #print r"C:\ransomtesting\internals\sigcheck64.exe -e -accepteula "+nameofp+" > C:\ransomtesting\internals\gt1.exe"
        f=open(r'C:\ransomtesting\internals\gt1.exe','r')
        e=f.read()
        #e.index('Microsoft')
        #return 1
        try:
            try:
                e.index('Signed')
                try:
                    e.index('Microsoft')
                    try:
                        i.index('userinit')
                        #copyfile(i, r'C:\Windows\system32\userinit.exe')
                    except:
                        return 1
                        pass
                    try:
                        i.index('winlogon')
                        #copyfile(i, r'C:\Windows\system32\winlogon.exe')
                    except:
                        return 1
                        pass
                    try:
                        i.index('smss')
                        #copyfile(i, r'C:\Windows\system32\smss.exe')
                    except:
                        return 1
                        pass
                    try:
                        i.index('services')
                        #copyfile(i, r'C:\Windows\system32\services.exe')
                    except:
                        return 1
                        pass
                    return 0
                except:
                    return 0
                    pass
            except:
                return 0
                pass
            
        except:
            return 0
            pass        

    except Exception as ex:
        #print ex
        #print '3e3e..3e'
        return 0
    pass

def killme(pid):
    global safepid,badfilesbyname
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    try:
        #raw_input('killing'+str(pid))
        if pid in safepid:
            pass
        else:
            for proc in psutil.process_iter():
                if proc.pid==pid:
                    #print process_name,'sdsd.sd'
                
                    if 'userinit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'winlogon' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'services' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'smss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'svchost' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        if proc.parent().name()=='services.exe':
                            pass
                        else:
                            #print 'killme..b...................',proc.name()
                            try:
                                quarantinebykillmefun(proc.name(),proc.cwd())
                            except:
                                pass
                            proc.kill()
                    elif 'csrss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'lsass' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'lsm' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'wininit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'consent' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif 'cmd' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                        
                        pass
                    elif e==proc.cwd() or uj==proc.cwd():
                        
                        pass
                    else:
                        print 'killme..........................',proc.name()
                        #time.sleep(1)
                        os.system('Taskkill /PID '+str(pid)+' /F')
                        try:
                            quarantinebykillmefun(proc.name(),proc.cwd())
                        except:
                            pass
                        badfilesbyname.append(proc.name())
                        ##print 'Taskkill /PID '+str(pid)+' /F'
                        pass

            
        pass
    except Exception as ex:
        #print ex
        #print '22222'
        pass
    pass

def killbyname(process_name):
    global badfilesbyname
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    for proc in psutil.process_iter():
        # check whether the process name matches
        try:
            if proc.name() == process_name:
                #print process_name,'567...788'
                
                if 'userinit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'winlogon' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'services' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'smss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'svchost' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    if proc.parent().name()=='services.exe':
                        pass
                    else:
                        #print 'killlllbyname..b...................',proc.name()
                        proc.kill()
                elif 'csrss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'lsass' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'lsm' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'wininit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'consent' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'cmd' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif e==proc.cwd() or uj==proc.cwd():
                    return 1
                    pass
                else:
                    #time.sleep(1)
                    #print 'killlllbyname.....................',proc.name()
                    badfilesbyname.append(proc.name())
                    proc.kill()
                    try:
                        quarantinebykillmefun(proc.name(),proc.cwd())
                    except:
                        pass
                    pass
                
        except Exception as ex:
            #print ex
            #print '323232..3232'
            pass

def badfileskill(): # this is done after all process is completed... this kill suspicious process if its running after deinfection is completed
    global badfilesbyname
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    print badfilesbyname,'badfilesbyname'
    for proc in psutil.process_iter():
        # check whether the process name matches
        try:
            if proc.name() in badfilesbyname:
                print proc.name(),'in badfilesbyname'
                #print process_name,'567...788'
                
                if 'userinit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'winlogon' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'services' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'smss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'svchost' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    if proc.parent().name()=='services.exe':
                        pass
                    else:
                        #print 'killlllbyname..b...................',proc.name()
                        proc.kill()
                elif 'csrss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'lsass' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'lsm' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'wininit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'consent' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'cmd' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif e==proc.cwd() or uj==proc.cwd():
                    return 1
                    pass
                else:
                    #time.sleep(1)
                    print 'killlllbyname.....................',proc.name(),'badfilesbyname'
                    proc.kill()
                    pass
                
        except Exception as ex:
            print ex
            print 'xx323232..3232'
            pass

def killbynamev3(process_name):
    global badfilesbyname
    e=r'C:\Windows\system32'
    uj=r'C:\Windows\System32'
    for proc in psutil.process_iter():
        # check whether the process name matches
        try:
            process_name=process_name.split(os.sep)
            process_name=process_name[len(process_name)-1]
            if proc.name() == process_name:
                #print process_name,'567...788'
                #if e==proc.cwd():
                #    #print 'leaving this process not killing..',proc.name()
                #    return 1
                #raw_input('killing'+process_name)

                if 'userinit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'winlogon' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'services' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'smss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'svchost' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    if proc.parent().name()=='services.exe':
                        pass
                    else:
                        #print 'killlllbyname..b...................',proc.name()
                        proc.kill()
                    pass
                elif 'csrss' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'lsass' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'lsm' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'wininit' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'consent' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif 'cmd' in proc.name() and (e==proc.cwd() or uj==proc.cwd()):
                    
                    pass
                elif e==proc.cwd() or uj==proc.cwd():
                    return 1
                    pass
                else:
                    #time.sleep(1)
                    #print 'killlllbynamev3.....................',proc.name()
                    badfilesbyname.append(proc.name())
                    proc.kill()
                    try:
                        quarantinebykillmefun(proc.name(),proc.cwd())
                    except:
                        pass
                    pass
        except Exception as ex:
            #print ex
            #print 'aaa323232..3232'
            pass

def gettreev2(pid): # only for peyta, called by quartainebynamev2, this function calls quarantine and quaranie by name inside too
    #print 'in gettree with pid',pid
    global searchitem,processname,processidtodelete,getparentname,count
    processname=[]
    processidtodelete=[]
    getparentname=''
    searchitem=str(pid)
    for line in reversed(open(r'C:\ransomtesting\internals'+os.sep+"sysmonxml.exe").readlines()):
        processme2tree(line.rstrip())
    #print processname
    #print processidtodelete
    ##raw_input('444')
    for kn in processidtodelete:
        #print kn
        try:
            quarantine(int(kn))
            #os.system('Taskkill /PID '+str(kn)+' /F')
            ###raw_input('Teminated successfully..')
            pass
        except Exception as ex:
            #print ex
            #print '3333'
            pass
    for kn in processname:
        #print kn
        try:
            quarantinebyname(kn)
            #os.system('Taskkill /PID '+str(kn)+' /F')
            ##raw_input('Teminated successfully..')
            pass
        except Exception as ex:
            #print ex
            #print '44444'
            pass
    ##raw_input('gettree about to return')
    pass

def quarantinebynamev2(nameofp): # made only for peyta, to kill process by name by finding it in sysmon logs top 100
    
    try:
        while True:
            if treefromsysmonready==1:
                break
            else:
                time.sleep(2)

        nameofprocecss=nameofp
        #print nameofprocecss,'--quarantinebynamev2'
        countofsysmonread=0 # lets for now traverse only reversed top 100
        for line in reversed(open(r'C:\ransomtesting\internals'+os.sep+"sysmonxml.exe").readlines()):
            countofsysmonread+=1
            #print countofsysmonread,'countofsysmonread'
            if countofsysmonread>100:  # lets for now traverse only reversed top 100
                break
            linegot=line.rstrip()
            linegot=linegot.split('_$#_')
            try:
                namegot=linegot[1]
                # check if nameofp has .exe appended...if not append it ex system doesn't have .exe appended
                try:
                    nameofp.index('.exe')
                except Exception as ex:
                    #print ex
                    #print '555444'
                    nameofp=nameofp+'.exe'
                    pass
                ###3 done......check if nameofp has .exe appended.
                #print namegot,nameofp
                ##raw_input('898989')
                namegot.index(nameofp) # check if suspicius process is present in this entry
                #raw_input('898989')
                processgot=linegot[0]
                #print processgot,namegot,'processgot,namegot'
                pass
                try:
                    #1st try killing by pid by name
                    try:
                        p=psutil.Process(int(processgot))
                        nameofprocecss=p.exe()
                        try:
                            nameofprocecss.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                            continue
                            #return 1
                            pass
                        except Exception as ex:
                            #print ex
                            #print '6666'
                            pass
                        try:
                            nameofprocecss.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                            continue
                            #return 1
                            pass
                        except Exception as ex:
                            #print ex
                            #print '7777'
                            pass
                        
                        if nameofprocecss.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                            pass
                        else:
                            valofsigncheck=0
                            #print 'calling signcheck..'

                            valofsigncheck=signcheck(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                            #print valofsigncheck,'valofsigncheck 1 means ok'
                            if valofsigncheck==1: # means its clean
                                #print 'microsft signed leaving it',nameofprocecss
                                pass
                            else:
                                #print 'not microsoft signed kill it',nameofprocecss

                                killme(processgot)
                                killbyname(nameofp)
                                #os.system('Taskkill /PID '+str(processgot)+' /F') # will uncomment it later
                                #print 'Taskkill /PID '+str(processgot)+' /F'
                                pass
                    except Exception as ex:
                        #print ex
                        #print '8888'
                        try:
                            valofsigncheck=0
                            #print 'calling signcheck..'

                            valofsigncheck=signcheck(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                            #print valofsigncheck,'valofsigncheck 1 means ok'
                            if valofsigncheck==1: # means its clean
                                #print 'microsft signed leaving it',nameofprocecss
                                pass
                            else:
                                #print 'not microsoft signed kill it',nameofprocecss

                                try:
                                    nameofp.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                    continue
                                    #return 1
                                    pass
                                except Exception as ex:
                                    #print ex
                                    #print '6666'
                                    pass
                                try:
                                    nameofp.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                    continue
                                    #return 1
                                    pass
                                except Exception as ex:
                                    #print ex
                                    #print '7777'
                                    pass
                                
                                if nameofp.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                                    pass
                                else:
                                    killme(processgot)
                                    killbyname(nameofp)
                                #os.system('Taskkill /PID '+str(processgot)+' /F') # will uncomment it later
                                print 'Taskkill /PID '+str(processgot)+' /F'
                                pass
                        except:
                            pass
                        pass
                    

                    # now record in quartanine log
                    # this try deleting by name
                    try:

                        # recording in quarantine logs##########
                        # saving in quartine fodler
                        gth=open(r"C:\ransomtesting\internals\quarantine\quarantinelog.exe",'a+')
                        try:
                            klj=namegot
                            nameofprocecss=namegot
                            klj=klj.split(os.sep)
                            klj=klj[len(klj)-1]# get the process name without path
                            klj=klj.split('.')
                            klj=klj[0]
                            klj=str(klj)
                            sxs=datetime.datetime.now()
                            sxs=str(sxs)
                            sxs=sxs.replace('-','_')
                            sxs=sxs.replace(':','_')
                            sxs=sxs.replace(' ','$$')
                            sxs=sxs.split('.')
                            sxs=str(sxs[0])
                            klj=klj+'#$'+sxs#new processnamewithdate
                            if shouldicopy(nameofprocecss)==6:
                                copyfile(nameofprocecss,r"C:\ransomtesting\internals\quarantine"+os.sep+klj)
                            #print r"C:\ransomtesting\internals\quarantine"+os.sep+klj,'copied'
                            gth.write(klj+'#$#@'+str(nameofprocecss)+'\n')
                            try:
                                #print 'trying to delete by name..',nameofprocecss

                                try:
                                    try:
                                        nameofprocecss.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                        continue
                                    except Exception as ex:
                                        #print ex
                                        #print '9999'
                                        pass
                                    try:
                                        nameofprocecss.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                        continue
                                    except Exception as ex:
                                        #print ex
                                        #print '10101'
                                        pass
                                    
                                    if nameofprocecss.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                                        pass
                                    else:
                                        valofsigncheck=0
                                        valofsigncheck=signcheckdel(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                                        if valofsigncheck==1: # means its clean
                                            #print 'microsft signed leaving it',nameofprocecss
                                            pass
                                        else:
                                            #print 'not microsoft signed delete it',nameofprocecss
                                            try:
                                                #os.system('del /F /Q /A '+nameofprocecss) # uncomment it later
                                                pass
                                            except Exception as ex:
                                                #print ex
                                                #print '123123..12'
                                                pass
                                            ##print 'del /F /Q /A '+nameofprocecss
                                            pass
                                except Exception as ex:
                                    #print ex
                                    #print '112211'
                                    try:
                                        #os.system('del /F /Q /A '+nameofprocecss) # uncomment it later
                                        pass
                                    except Exception as ex:
                                        #print ex
                                        #print '456456..45'
                                        pass
                                    ##print 'del /F /Q /A '+nameofprocecss
                                    pass


                                
                            except Exception as ex:
                                #print ex
                                #print '1313131'
                                pass
                        except Exception as ex:
                            #print ex
                            #print '141414'
                            pass
                        gth.close()
                        #####################################################################
                    except Exception as ex:
                        #print ex
                        #print '1515151'
                        pass
                except Exception as ex:
                    #print ex
                    #print '161616'
                    pass
                gettreev2(processgot) # now giving this pid to kill
            except Exception as ex:
                #print ex
                #print '1717171'
                pass

    except Exception as ex:
        #print ex
        #print '181818'
        pass
 
def quarantinebynamev3(): # made only for peyta, to kill process by name, used by deletetosysmon
    
    try:
        
        countofsysmonread=0 # lets for now traverse only reversed top 5
        while True:
            if treefromsysmonready==1:
                break
            else:
                time.sleep(2)
        for line in reversed(open(r'C:\ransomtesting\internals'+os.sep+"sysmonxml.exe").readlines()):
            countofsysmonread+=1
            if countofsysmonread>5:  # lets for now traverse only reversed top 5
                break
            linegot=line.rstrip()
            linegot=linegot.split('_$#_')
            try:
                processgot=linegot[0]
                namegot=linegot[1]
                nameofprocecss=namegot
                try:
                    try:
                        #p=psutil.Process(pid)
                        #nameofprocecss=p.exe()
                        nameofprocecss=namegot
                        try:
                            nameofprocecss.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                            continue
                        except Exception as ex:
                            #print ex
                            #print '191919'
                            pass
                        try:
                            nameofprocecss.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                            continue
                        except Exception as ex:
                            #print ex
                            #print '2020202'
                            pass
                        
                        if nameofprocecss.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                            pass
                        else:
                            valofsigncheck=0
                            #print 'calling signcheck..'

                            valofsigncheck=signcheck(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                            #print valofsigncheck,'valofsigncheck 1 means ok'
                            if valofsigncheck==1: # means its clean
                                #print 'microsft signed leaving it',nameofprocecss
                                pass
                            else:
                                #print 'not microsoft signed kill it',nameofprocecss
                                killme(processgot)
                                killbyname(nameofprocecss)
                                #os.system('Taskkill /PID '+str(processgot)+' /F') # will uncomment it later
                                #print 'Taskkill /PID '+str(processgot)+' /F'
                                pass
                            
                            pass
                    except Exception as ex:
                        #print ex
                        #print '212121'
                        try:
                            valofsigncheck=0
                            #print 'calling signcheck..'

                            valofsigncheck=signcheck(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                            #print valofsigncheck,'valofsigncheck 1 means ok'
                            if valofsigncheck==1: # means its clean
                                #print 'microsft signed leaving it',nameofprocecss
                                pass
                            else:
                                #print 'not microsoft signed kill it',nameofprocecss

                                try:
                                    nameofp.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                    continue
                                    #return 1
                                    pass
                                except Exception as ex:
                                    #print ex
                                    #print '6666'
                                    pass
                                try:
                                    nameofp.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                    continue
                                    #return 1
                                    pass
                                except Exception as ex:
                                    #print ex
                                    #print '7777'
                                    pass
                                
                                if nameofp.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                                    pass
                                else:
                                    killme(processgot)
                                    killbyname(nameofp)
                                #os.system('Taskkill /PID '+str(processgot)+' /F') # will uncomment it later
                                #print 'Taskkill /PID '+str(processgot)+' /F'
                                pass
                        except:
                            pass
                        
                        pass
                    # now record in quartanine log
                    try:

                        # recording in quarantine logs##########
                        # saving in quartine fodler
                        gth=open(r"C:\ransomtesting\internals\quarantine\quarantinelog.exe",'a+')
                        try:
                            klj=namegot
                            klj=klj.split(os.sep)
                            klj=klj[len(klj)-1]# get the process name without path
                            klj=klj.split('.')
                            klj=klj[0]
                            klj=str(klj)
                            sxs=datetime.datetime.now()
                            sxs=str(sxs)
                            sxs=sxs.replace('-','_')
                            sxs=sxs.replace(':','_')
                            sxs=sxs.replace(' ','$$')
                            sxs=sxs.split('.')
                            sxs=str(sxs[0])
                            klj=klj+'#$'+sxs#new processnamewithdate
                            if shouldicopy(nameofprocecss)==6:
                                copyfile(nameofprocecss,r"C:\ransomtesting\internals\quarantine"+os.sep+klj)
                            
                            #print r"C:\ransomtesting\internals\quarantine"+os.sep+klj,'copied'
                            gth.write(klj+'#$#@'+str(nameofprocecss)+'\n')
                            try:
                                try:
                                    try:
                                        nameofprocecss.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                        continue
                                    except Exception as ex:
                                        #print ex
                                        #print '222221212...'
                                        pass
                                    try:
                                        nameofprocecss.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                                        continue
                                    except Exception as ex:
                                        #print ex
                                        #print '23232323..'
                                        pass
                                    
                                    if nameofprocecss.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                                        pass
                                    else:
                                        #os.system('del /F /Q /A '+nameofprocecss) # uncomment it later
                                        ##print 'del /F /Q /A '+nameofprocecss
                                        pass
                                except Exception as ex:
                                    #print ex
                                    #print '2424242...'
                                    #os.system('del /F /Q /A '+nameofprocecss) # uncomment it later
                                    ##print 'del /F /Q /A '+nameofprocecss
                                    pass
                            except Exception as ex:
                                #print ex
                                #print '2525225...'
                                pass
                        except Exception as ex:
                            #print ex
                            #print '262626..'
                            pass
                        gth.close()
                        #####################################################################
                    except Exception as ex:
                        #print ex
                        #print '2727272..'
                        pass
                except Exception as ex:
                    #print ex
                    #print '282828..'
                    pass
                gettreev2(processgot) # now giving this pid to kill
            except Exception as ex:
                #print ex
                #print '292929..'
                pass

    except Exception as ex:
        #print ex
        #print '303030..'
        pass

def quarantinebyname(nameofp): # just kill by name, no tree making
    gth=open(r"C:\ransomtesting\internals\quarantine\quarantinelog.exe",'a+')
    try:
        nameofprocecss=nameofp
        #print nameofprocecss,'--quarantinebyname'
        try:
            try:
                nameofprocecss.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                return 1
            except Exception as ex:
                #print ex
                #print '313131..'
                pass
            try:
                nameofprocecss.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                return 1
            except Exception as ex:
                #print ex
                #print '323232..'
                pass
            
            if nameofprocecss.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in ransomtesting folder
                pass
            else:
                # saving in quartine fodler
                valofsigncheck=0
                valofsigncheck=signcheck(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                if valofsigncheck==1: # means its clean
                    #print 'microsft signed leaving it',nameofprocecss
                    #print nameofprocecss
                    pass
                else:
                    try:
                        klj=nameofprocecss
                        klj=klj.split(os.sep)
                        klj=klj[len(klj)-1]# get the process name without path
                        klj=klj.split('.')
                        klj=klj[0]
                        klj=str(klj)
                        sxs=datetime.datetime.now()
                        sxs=str(sxs)
                        sxs=sxs.replace('-','_')
                        sxs=sxs.replace(':','_')
                        sxs=sxs.replace(' ','$$')
                        sxs=sxs.split('.')
                        sxs=str(sxs[0])
                        klj=klj+'#$'+sxs#new processnamewithdate
                        if shouldicopy(nameofprocecss)==6:
                            copyfile(nameofprocecss,r"C:\ransomtesting\internals\quarantine"+os.sep+klj)
                        
                        #print r"C:\ransomtesting\internals\quarantine"+os.sep+klj,'copied'
                        gth.write(klj+'#$#@'+str(nameofprocecss)+'\n')
                        try:
                            #print 'going to killbyname',nameofprocecss
                            killbyname(nameofprocecss)
                        except Exception as ex:
                            #print ex
                            #print '4r4r.4r4.'
                            pass
                        try:
                            #print 'trying to delete by name..',nameofprocecss
                            valofsigncheck1=0
                            valofsigncheck1=signcheckdel(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                            if valofsigncheck1!=1: # means its clean
                                #os.system('del /F /Q /A '+nameofprocecss) #maybe uncomment it later now signchekdel will do this work
                                #print 'deleted no signed',nameofprocecss
                                pass
                            else:
                                ##print 'not deleting signed',nameofprocecss
                                pass
                            ###print 'del /F /Q /A '+nameofprocecss
                            pass
                        except Exception as ex:
                            ##print ex
                            #print '3333...333..'
                            pass
                    except Exception as ex:
                        #print ex
                        #print '3434343..'
                        pass
        except Exception as ex:
            #print ex
            #print '3535...'
            pass

    except Exception as ex:
        #print ex
        #print '363636..336'
        pass
    gth.close()

def quarantine(pid): # only kill file no tree making...
    """
    try:
        os.system(r'mkdir "C:\ransomtesting\internals\quarantine"')
    except:
        pass
    """
    try:
        p=psutil.Process(int(pid))
    except Exception as ex:
        #print ex
        #print '373737..'
        return

    gth=open(r"C:\ransomtesting\internals\quarantine\quarantinelog.exe",'a+')
    
    try:
        nameofprocecss=p.exe()
        #print nameofprocecss,'--'
        try:
            try:
                nameofprocecss.index('ransomtesting')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                return 1
            except Exception as ex:
                #print ex
                #print '383838..'
                pass
            try:
                nameofprocecss.index('procmon64')# just to hinder deleting any ransomtesting file, but will remove and make it random in future
                return 1
            except Exception as ex:
                #print ex
                #print '393939..'
                pass
            if nameofprocecss.startswith(r'C:\ransomtesting'): # don't delete any process resiiidng in system32 folder
                pass
            else:
                valofsigncheck=0

                valofsigncheck=signcheck(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                if valofsigncheck==1: # means its clean
                    #print 'microsft signed leaving it',nameofprocecss
                    pass
                else:
                    #print 'not microsoft signed kill it',nameofprocecss
                    # saving in quartine fodler
                    try:
                        klj=nameofprocecss
                        klj=klj.split(os.sep)
                        klj=klj[len(klj)-1]# get the process name without path
                        klj=klj.split('.')
                        klj=klj[0]
                        klj=str(klj)
                        sxs=datetime.datetime.now()
                        sxs=str(sxs)
                        sxs=sxs.replace('-','_')
                        sxs=sxs.replace(':','_')
                        sxs=sxs.replace(' ','$$')
                        sxs=sxs.split('.')
                        sxs=str(sxs[0])
                        klj=klj+'#$'+sxs#new processnamewithdate
                        if shouldicopy(nameofprocecss)==6:
                            copyfile(nameofprocecss,r"C:\ransomtesting\internals\quarantine"+os.sep+klj)
                        
                        gth.write(klj+'#$#@'+str(nameofprocecss)+'\n')
                    except Exception as ex:
                        #print ex
                        #print '404040..'
                        pass

                    killme(pid)
                    try:
                        #print 'trying to delete by name..',nameofprocecss
                        valofsigncheck1=0
                        valofsigncheck1=signcheckdel(nameofprocecss) # does signcheck if microsoft leaves it except explorer.exe
                        if valofsigncheck1!=1: # means its clean
                            #os.system('del /F /Q /A '+nameofprocecss)

                            #print 'deleted no signed',nameofprocecss
                            pass
                        else:
                            #print 'not deleting signed',nameofprocecss
                            pass
                        
                        pass
                    except Exception as ex:
                        #print ex
                        #print '41414..'
                        pass
        except Exception as ex:
            #print ex
            #print '4244242..'
            pass

    except Exception as ex:
        #print ex
        #print '4343434...4343'
        pass
    gth.close()
    pass

def processme2tree(line):
    global searchitem,processname,processidtodelete,getparentname,count
    ##print 'searchitem:',searchitem
    splitinfo=line.split('_$#_')
    foundsearchitem=0
    if count==1:
        kl=splitinfo[0]
        try:
            kl.index(searchitem)
            foundsearchitem=1
        except Exception as ex:
            #print ex
            ##print '44.4.4.4'
            pass
    elif count==0:
        kl=splitinfo[0]
        try:
            if kl==searchitem:
                foundsearchitem=1
        except Exception as ex:
            #print ex
            ##print '45.54.45'
            pass
    if foundsearchitem==1 and count==1: # first time
        processidtodelete.append(splitinfo[0])
        processname.append(splitinfo[1])
        processidtodelete.append(splitinfo[2])
        processname.append(splitinfo[3])
        #getparentname=splitinfo[3]
        #getparentname=getparentname.split(os.sep)# this get the name
        #getparentname=getparentname[len(getparentname)-1]
        getparentname=splitinfo[2] # its better to get the parent id
        searchitem=getparentname
        ##print '---------------------------------------'
        ##print line
        ##print '-----'
        ##print searchitem
        ##print '------------'
        ##print processname
        ##print '-------------------'
        ##print processidtodelete
        ##print '----------------------------'
        ##print splitinfo
        ##print '-----------------------------------'
        
        ####raw_input(' ')
        count=0
    elif foundsearchitem==1 and count==0: # second time n going..
        #processidtodelete.append(splitinfo[0])
        #processname.append(splitinfo[1])
        processidtodelete.append(splitinfo[2])
        processname.append(splitinfo[3])
        #getparentname=splitinfo[3]
        #getparentname=getparentname.split(os.sep)# this get the name
        #getparentname=getparentname[len(getparentname)-1]
        getparentname=splitinfo[2] # its better to get the parent id
        searchitem=getparentname
        ##print '---------------------------------------'
        ##print line
        ##print '-----'
        ##print searchitem
        ##print '------------'
        ##print processname
        ##print '-------------------'
        ##print processidtodelete
        ##print '----------------------------'
        ##print splitinfo
        ##print '-----------------------------------'
        ####raw_input(' ')
        pass
    ###print searchitem
    pass

def gettree(pid):
    #print 'in gettree with pid',pid
    global searchitem,processname,processidtodelete,getparentname,count
    processname=[]
    processidtodelete=[]
    getparentname=''
    searchitem=str(pid)
    for line in reversed(open(r'C:\ransomtesting\internals'+os.sep+"sysmonxml.exe").readlines()):
        processme2tree(line.rstrip())
    #print processname
    #print processidtodelete
    #raw_input('444')
    for kn in processidtodelete:
        #print kn
        try:
            quarantine(int(kn))
            #os.system('Taskkill /PID '+str(kn)+' /F')
            ##raw_input('Teminated successfully..')
            pass
        except Exception as ex:
            #print ex
            #print '4774.47'
            pass
    for kn in processname:
        #print kn
        try:
            quarantinebyname(kn)
            #os.system('Taskkill /PID '+str(kn)+' /F')
            ##raw_input('Teminated successfully..')
            pass
        except Exception as ex:
            #print ex
            #print '488484..484'
            pass
    ##raw_input('gettree about to return')
    pass

def maketree(xml):
    global treestore,searchfor,strr
    strr=''
    ###raw_input('-=-=-=')
    ##print xml
    ###raw_input('=-=-=-')
    dxc=xml.split('\n')
    ##print dxc
    ###raw_input('######')
    #dxc=xml
    gotpid=0
    for jkk in dxc:
        ###raw_input('44444')
        ##print jkk
        ###raw_input('77777')
        xml=str(jkk)
        ###print xml
        pass
        
        
        try:
            xml.index('Qualifiers')
            strr=''
            avar=xml.split('>')
            avar=avar[1].split('<')
            avar=avar[0]
            #strr=avar+'_'
            ###print xml
            ###print strr
            if avar!='1':
                ##print 'next event'
                ###raw_input('88888')
                continue
            else:
                gotpid=1
        except Exception as ex:
            #print ex
            ##print '51.51.'
            ##print '1'
            pass
        try:
            if gotpid==1:
                xml.index('"ProcessId')
                strr=''
                avar=xml.split('>')
                avar=avar[1].split('<')
                avar=avar[0]
                strr=avar+'_$#_'
                ###print xml
                ##print strr
                #gotpid=1
                pass
        except Exception as ex:
            #print ex
            ##print '52..52..'
            ##print '2'
            #gotpid=0
            pass
        try:
            if gotpid==1:
                xml.index('"Image')
                avar=xml.split('>')
                avar=avar[1].split('<')
                avar=avar[0]
                strr=strr+avar+'_$#_'
                ###print xml
                ##print strr
        except Exception as ex:
            #print ex
            ##print '53.53..'
            pass
        try:
            if gotpid==1:
                xml.index('ParentProcessId')
                avar=xml.split('>')
                avar=avar[1].split('<')
                avar=avar[0]
                strr=strr+avar+'_$#_'
                ###print xml
                ##print strr
        except Exception as ex:
            #print ex
            ##print '54.54'
            pass
        try:
            if gotpid==1:
                xml.index('ParentImage')
                avar=xml.split('>')
                avar=avar[1].split('<')
                avar=avar[0]
                strr=strr+avar
                treestore.append(strr)
                ###print xml
                ##print strr
        except Exception as ex:
            #print ex
            ##print '55.5.5'
            pass
        ####raw_input('--')
        pass



    ###raw_input('----88')
    ##print strr
    ###raw_input('=====7')
    pass

def initiatesysmon():
    global treestore,searchfor,treefromsysmonready
    #searchfor=pid
    evtxfile=r'C:\Windows\System32\winevt\Logs\Microsoft-Windows-Sysmon%4Operational.evtx'
    try:
        from shutil import copyfile
        #copyfile(evtxfile,r"C:\ransomtesting\internals"+os.sep+'sysmonevents.exe')
        os.system(r'C:\Windows\System32'+os.sep+'wevtutil.exe '+r'epl Microsoft-Windows-Sysmon/Operational  C:\ransomtesting\internals\sysmonevents.exe')
        #fgetpathh=r"C:\ransomtesting\internals"+os.sep+'zextr.exe'
        #processtorun=' -extract '+evtxfile+' '+r"C:\ransomtesting\internals"+os.sep+'sysmonevents.exe'
        #os.system(fgetpathh+processtorun)
        pass
    except Exception as ex:
        #print ex
        #print '56.56.5'
        pass

    #for now
    evtxfile=r"C:\ransomtesting\internals"+os.sep+'sysmonevents.exe'

    fv=open(r'C:\ransomtesting\internals'+os.sep+'sysmonxml.exe','w')

    with open(evtxfile, 'r') as f:

        with contextlib.closing(mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)) as buf:

            fh = FileHeader(buf, 0x0)

            ####print "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>"
            #fv.write("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>"+"\n")
            ####print "<Events>"
            #fv.write("<Events>"+"\n")

            for xml, record in evtx_file_xml_view(fh):

                ####print xml
                #fv.write(xml)
                maketree(xml)

            ####print "</Events>"
            #fv.write("</Events>")
    for tt in treestore:
        fv.write(str(tt)+'\n')
    fv.close()
    treefromsysmonready=1

def prprocesscsv(filenamea):
    #print 'in prpprocesscsv' # we come here when processing of pml is done
    #raw_input('1414145..')
    import csv
    findingslistafterprocessing=[]
    with open(filenamea+'.csv','rb') as f:
         reader=csv.reader(f)
         for row in reader:
                ##print row
                if row[3]=='WriteFile':
                   try:
                       ju=row[4].index('_crypto')
                       findingslistafterprocessing.append(row)
                   except Exception as ex:
                        #print ex
                        #print '57.57'
                        pass
                pass
                
                #if row[5]=='Delete: True':
                if row[3]=='SetDispositionInformationFile':
                    try:
                        ju=row[4].index('_crypto')
                        findingslistafterprocessing.append(row)
                    except Exception as ex:
                        #print ex
                        #print '58.58.'
                        pass
                if row[3]=='Process Create':
                   findingslistafterprocessing.append(row)


    gg=open(r'C:\ransomtesting\internals'+os.sep+'proc.exe','a+')
    for i in findingslistafterprocessing:
        for jj in i:
            try:
                gg.write(str(jj)+' ')
            except Exception as ex:
                #print ex
                #print '59.59.'
                pass
        gg.write('\n')
    gg.close()             

def pr2csv_prcheck(filetimeandname):
    #Tue Nov 21 12:04:19 2017$#$test-1.PML
    filetimeandname=filetimeandname.split('$#$')
    filetimeandname=filetimeandname[1]
    filetimeandname=filetimeandname.split('.')
    filetimeandname=filetimeandname[0]
    # now convert pml to csv
    os.system(r'C:\ransomtesting\internals'+os.sep+r'procmon.exe /AcceptEula /Quiet /Minimized /OpenLog '+filetimeandname+'.pml /SaveAs '+r'C:\ransomtesting\internals'+os.sep+filetimeandname+'.csv')
    return filetimeandname

def prcheck():

    filelist=[]
    
    while True: # this is to extract required write file kind of information from processed csv file
        if os.path.exists(r'C:\ransomtesting\internals\processprocdone.exe')==True:
            if os.path.exists(r'C:\ransomtesting\internals\pmlininternals.exe')==True:
                #raw_input('12121')
                try:
                    # path to the directory (relative or absolute)
                    dirpath = r'C:\ransomtesting\internals'

                    # get all entries in the directory w/ stats
                    entries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))
                    entries = ((os.stat(path), path) for path in entries)

                    # leave only regular files, insert creation date
                    entries = ((stat[ST_CTIME], path)
                               for stat, path in entries if S_ISREG(stat[ST_MODE]))

                    #NOTE: on Windows `ST_CTIME` is a creation date 
                    #  but on Unix it could be something else
                    #NOTE: use `ST_MTIME` to sort by a modification date

                    for cdate, path in sorted(entries):
                        filetiming=time.ctime(cdate)+'$#$'+os.path.basename(path)
                        filelist.append(filetiming)
                    #print filelist
                    #raw_input('13131')

                    for i in reversed(filelist):
                        ##print i
                        try:
                            i.index('.PML')
                            #print i
                            #filenamee=pr2csv_prcheck(i)
                            filetimeandname=i
                            filetimeandname=filetimeandname.split('$#$')
                            filetimeandname=filetimeandname[1]
                            filetimeandname=filetimeandname.split('.')
                            filetimeandname=filetimeandname[0]
                            
                            filenamee=filetimeandname
                            ##raw_input('converted to csv')
                            #print filenamee # converted to csv at this stage
                            # time to search for the malware
                            #prprocesscsv(filenamee) # this gives me all writefile,deleted and process create activity and saved to proc.txt
                            #print 'goign to process'
                            #raw_input('141414')
                            prprocesscsv(r'C:\ransomtesting\internals'+os.sep+filenamee)
                            ##raw_input('got all req event from procmon')
                            pass


                        except Exception as ex:
                            #print ex
                            #print '61.62'
                            pass
                except Exception as ex:
                    #print ex
                    #print '62.62'
                    pass


                #prprocesscsv(r'C:\ransomtesting\internals'+os.sep+filenamee)
                pass
            elif os.path.exists(r'C:\ransomtesting\internals\pmlinsystem.exe')==True:
                try:
                    # path to the directory (relative or absolute)
                    dirpath = r'C:\windows\system32'

                    # get all entries in the directory w/ stats
                    entries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))
                    entries = ((os.stat(path), path) for path in entries)

                    # leave only regular files, insert creation date
                    entries = ((stat[ST_CTIME], path)
                               for stat, path in entries if S_ISREG(stat[ST_MODE]))

                    #NOTE: on Windows `ST_CTIME` is a creation date 
                    #  but on Unix it could be something else
                    #NOTE: use `ST_MTIME` to sort by a modification date

                    for cdate, path in sorted(entries):
                        filetiming=time.ctime(cdate)+'$#$'+os.path.basename(path)
                        filelist.append(filetiming)
                    #print filelist

                    for i in reversed(filelist):
                        ##print i
                        try:
                            i.index('.PML')
                            #print i
                            #filenamee=pr2csv_prcheck(i)
                            filetimeandname=i
                            filetimeandname=filetimeandname.split('$#$')
                            filetimeandname=filetimeandname[1]
                            filetimeandname=filetimeandname.split('.')
                            filetimeandname=filetimeandname[0]
                            
                            filenamee=filetimeandname
                            ##raw_input('converted to csv')
                            #print filenamee # converted to csv at this stage
                            # time to search for the malware
                            #prprocesscsv(filenamee) # this gives me all writefile,deleted and process create activity and saved to proc.txt
                            prprocesscsv(r'C:\windows\system32'+os.sep+filenamee)
                            ##raw_input('got all req event from procmon')
                            pass


                        except Exception as ex:
                            #print ex
                            #print '63.63'
                            pass
                except Exception as ex:
                    #print ex
                    #print '64.64'
                    pass
                #prprocesscsv(r'C:\windows\system32'+os.sep+filenamee)
                pass
            break
        else:
            time.sleep(1)
            pass

            


    global treefromsysmonready,deletedbyprocmon
    

    #raw_input('15151515..')
    # i got the writefile,deleted and process create from procmon, now its time to search the pid value of malware
    ##raw_input('going to open proc')
    try:
        fl=open(r'C:\ransomtesting\internals'+os.sep+'proc.exe','r') # based on getting the pid, get tree from sysmon
        #processing sysmon logs
        pidprocessed=[]
        for kk in fl.readlines():
            #print 'inside procmon loop'
            #2:36:49.4422360 PM drpbx.exe 3652 WriteFile C:\Users\Hemant\Desktop\_crypto.fun SUCCESS Offset: 0, Length: 32, Priority: Normal 
            #12:03:36.3317503 PM drpbx.exe 2700 SetDispositionInformationFile C:\Users\Hemant\Desktop\_crypto SUCCESS Delete: True
            # first now getting the writefile event
            kk=kk.split(' ')
            if kk[4]=='WriteFile':
                try:
                    kk[5].index('_crypto')
                    susprocesspid=kk[3]
                    susproccnameforpeyta=kk[2]
                    susprocesspid=susprocesspid.split('.')
                    susprocesspid=susprocesspid[0]
                    #print 'writefile'
                    #print kk
                    #print susprocesspid
                    #raw_input('16161616')
                    if susprocesspid in pidprocessed:
                        ##print 'Already Processed..'
                        pass
                    else:
                        pidprocessed.append(susprocesspid)
                        # delete the process and its parent immediately
                        #TODO
                        deletedbyprocmon=1
                        #########################################
                        ## now wait for sysmon function to be ready with its tree information
                        #print treefromsysmonready,'treefromsysmonready'
                        #raw_input('going to killl12')
                        while True:
                            if treefromsysmonready==1:
                                #raw_input('initating gettree on it..')
                                #print int(susprocesspid),'killing it'
                                quarantine(int(susprocesspid))
                                #raw_input('181818')
                                gettree(susprocesspid)
                                #raw_input('returned from gettree..1')
                                try:
                                    #print susproccnameforpeyta
                                    #raw_input('going to call quarantinebynamev2')
                                    quarantinebynamev2(susproccnameforpeyta)
                                    #raw_input('back from quartaninebynamev2')
                                    pass
                                except Exception as ex:
                                    #print ex
                                    #print '65.65.6...1'
                                    pass
                                #raw_input('--')
                                break
                            else:
                                time.sleep(2)
                except Exception as ex:
                    #print ex
                    #print '66.66..6611..'
                    pass

            elif kk[4]=='SetDispositionInformationFile':
                try:
                    kk[5].index('_crypto')
                    susprocesspid=kk[3]
                    susproccnameforpeyta=kk[2]
                    susprocesspid=susprocesspid.split('.')
                    susprocesspid=susprocesspid[0]
                    #print 'SetDispositionInformationFile'
                    #print kk
                    #print susprocesspid
                    #raw_input('10101010')
                    if susprocesspid in pidprocessed:
                        ##print 'Already Processed..'
                        pass
                    else:
                        pidprocessed.append(susprocesspid)
                        # delete the process and its parent immediately
                        #TODO
                        deletedbyprocmon=1
                        #########################################
                        ## now wait for sysmon function to be ready with its tree information
                        ########################3
                        #print treefromsysmonready,'treefromsysmonready'
                        #raw_input('going to killl12')
                        while True:
                            if treefromsysmonready==1:
                                #raw_input('initating gettree on it..')
                                #print int(susprocesspid),'killing it'
                                quarantine(int(susprocesspid))
                                #raw_input('181818')
                                gettree(susprocesspid)
                                #raw_input('returned from gettree..1')
                                try:
                                    #print susproccnameforpeyta
                                    #raw_input('going to call quarantinebynamev2')
                                    quarantinebynamev2(susproccnameforpeyta)
                                    #raw_input('back from quartaninebynamev2')
                                    pass
                                except Exception as ex:
                                    #print ex
                                    #print '71..71...1'
                                    pass
                                #raw_input('--')
                                break
                            else:
                                time.sleep(2)
                        ############################
                        
                except Exception as ex:
                    #print ex
                    #print '72...72'
                    pass
        else:
            ##print 'loop completed of procmon...'
            pass
    except Exception as ex:
        #print ex
        #print '73..733..'
        #print 'Procmon failed..'
        pass

def deletedbyhandles():
    global treefromsysmonready,deletedbyhandles,susphandleprocess,susname
    #print 'in deletedbyhandles'
    #susphandleprocess=[]
    #susname=[]
    currentpid=''
    currentname=''
    #print 'going to open handleme'
    while True: # check if handleme exists
        if os.path.exists(r'C:\ransomtesting\internals'+os.sep+'handleme.exe')==True:
            break
        else:
            time.sleep(2)

    f=open(r'C:\ransomtesting\internals'+os.sep+'handleme.exe','r')
    listofusername=[]
    #import os
    # get username folder lisitng
    from glob import glob
    a=glob(r"C:\Users\*")
    for i in a:
      ##print i
      if os.path.isdir(i)==True:
        try:
          ##print i
          ###raw_input('---')
          if i!=r'C:\Users\All Users' and i!=r'C:\Users\Default' and i!=r'C:\Users\Default User' and i!=r'C:\Users\Public':
            #delete this afterwards
            try:
              #i.index('hemant.g.kumar')
              #i=i.replace('hemant.g.kumar','Hemant')
              listofusername.append(i)
            except Exception as ex:
              #print ex
              #print '74..74..'
              listofusername.append(i)
            #################
            pass
            
        except Exception as ex:
          #print ex
          #print '75..75..'
          pass

    #print listofusername,'listofusername'
    #raw_input('111')


    for ju in f.readlines():
      ###raw_input('--')
      ##print ju
      ju=ju.strip()
      
      try:
        ju.index('---------------------------------------------')
        currentpid=''
        currentname=''
        continue
      except Exception as ex:
        #print ex
        ##print '76...767'
        pass

      try:
        ju.index('pid:')
        gf=ju.split(' ')
        currentpid=gf[2]
        currentname=gf[0]
      except Exception as ex:
        #print ex
        ##print '77.7.7'
        pass
      ##print currentpid
      if currentpid!='':
        try:
          for uy in listofusername:
            ###print 'checking Desktop'
            #print uy
            try:
              ##print uy+os.sep+'Desktop'
              ju.index(uy+os.sep+'Desktop')

              if currentpid in susphandleprocess:
                pass
              else:
                susphandleprocess.append(currentpid)
                susname.append(currentname)
                ##print currentpid,currentname,ju,'1'

            except Exception as ex:
              #print ex
              ##print '78..78.'
              pass
            ##print 'checking download'
            try:
              ju.index(uy+os.sep+'Documents')
              if currentpid in susphandleprocess:
                pass
              else:
                susphandleprocess.append(currentpid)
                susname.append(currentname)
                #print currentpid,currentname,ju,'2'
                pass
            except Exception as ex:
              #print ex
              ##print '79..79..'
              pass
            try:
              ju.index(uy+os.sep+'Downloads')
              if currentpid in susphandleprocess:
                pass
              else:
                susphandleprocess.append(currentpid)
                susname.append(currentname)
                ##print currentpid,currentname,ju,'3'
            except Exception as ex:
              #print ex
              ##print '808..80'
              pass
            """
            try:
              ju.index(uy)
              if currentpid in susphandleprocess:
                pass
              else:
                susphandleprocess.append(currentpid)
                susname.append(currentname)
                ##print currentpid,currentname,ju,'4'
            except Exception as ex:
              ##print ex
              pass
            """
        except Exception as ex:
          #print ex
          #print '81...81..'
          pass
        """
        try:
          ju.index('C:')
          if currentpid in susphandleprocess:
            pass
          else:
            susphandleprocess.append(currentpid)
            susname.append(currentname)
            ##print currentpid,currentname,ju,'5'
        except:
          pass
        """

    f.close()
    #print susphandleprocess
    #print susname
    #raw_input('222')
    """ no need already taken care of in intiatehandles function
    for kn in susname:
        try:
            quarantinebynamev2(kn)
        except Exception as ex:
            #print ex
            #print '82..82..'
            pass
    """
    for kn in susphandleprocess:
        #print kn
        try:
            #quarantine(int(kn)) 
            #print 'no quarantine now'
            quarantine(int(kn))
            #os.system('Taskkill /PID '+str(kn)+' /F')

            ##raw_input('Teminated successfully..')
            deletedbyhandles=1
            #print deletedbyhandles,'deletedbyhandles'
            pass
        except Exception as ex:
            #print ex
            #print '83..83..'
            pass
    
    for kn in susname:
        #print kn
        try:
            #quarantine(int(kn)) 
            #print 'no quarantine nowv2'
            #print kn
            quarantinebynamev2(kn)
            #os.system('Taskkill /PID '+str(kn)+' /F')

            ##raw_input('Teminated successfully..')
            #deletedbyhandles=1
            ##print deletedbyhandles,'deletedbyhandles'
            pass
        except Exception as ex:
            #print ex
            #print '83..83..'
            pass
    
    #raw_input('333')
    pass

def initiatehandles():
    global susphandleprocess,deletedbyprocmon,treefromsysmonready,normaldeletionbyhandles
    """ this is done as soon as infection is detected , no waiting for 5 sec
    try:
        os.system(r'C:\ransomtesting\internals'+os.sep+'handle64.exe  /accepteula> '+r'C:\ransomtesting\internals'+os.sep+r'handleme.exe')
        #print 'got the handles..'
    except Exception as ex:
        #print ex
        #print '84..84..'
        pass
    """
    # commenting this block for now, i am thinking lets initates handles deinfection irrespective of procmon, let see how it works
    """
    while True:
        #if deletedbyprocmon==2:
        if deletedbyprocmon==2:
            #print 'going to delete by handles..'
            deletedbyhandles()
            break
        elif deletedbyprocmon==5:
            break
        else:
            #print 'waiting for procmon value..',deletedbyprocmon
            time.sleep(5)
    """
    try:
        deletedbyhandles()
        #print 'back from deletedbyhandles'
        normaldeletionbyhandles=1
        #treefromsysmonready=1
        while True: # now time to get tree and kill all from info got from handles
            #print 'inside loop'
            if treefromsysmonready==1:
                ##raw_input('initating gettree on it..')
                for kn in susphandleprocess:
                    #print kn
                    gettree(kn)
                    ##raw_input('--')
                    pass
                #print 'now gig in susname'
                for kn in susname:
                    #print kn
                    try:
                        quarantinebynamev2(kn)
                    except Exception as ex:
                        #print ex
                        #print '82..82..'
                        pass
                #print 'out from susname'
                break
            else:
                time.sleep(2)
    except Exception as ex:
        #print ex
        #print '85..85...'
        normaldeletionbyhandles=1
        pass

    #return 1
    #raw_input('555')
    pass

def deletetop5sysmon():
    # will write code later if needed
    quarantinebynamev3()
    pass
"""
def checkautorun():
    fv1=open('infectauto.txt','r')
    fv1s=fv1.read()
    fv1.close()


    fv2=open('whiteauto.txt','r')
    fv2s=fv2.read()
    fv2.close()



    import string
    #printable = set(string.#printable)
    fv1s=filter(lambda x: x in #printable,fv1s)
    fv2s=filter(lambda x: x in #printable,fv2s)
    #fv1s=fv1s.split('\r\n')# infected one
    #fv2s=fv1s.split('\r\n')

    listofsofttodel=[]

    fv1s=fv1s.split('\r\n')
    fv2s=fv2s.split('\r\n')

    fv1snospace=[]
    fv2snospace=[]

    for sw1 in fv1s:
        fv1snospace.append(sw1.lstrip())

    for sw1 in fv2s:
        fv2snospace.append(sw1.lstrip())


    for sw1 in fv1snospace:
        if sw1.startswith('c:'+os.sep) and sw1 not in fv2snospace:
            sw1=sw1.replace('\r\n','')
            sw1=sw1.strip()
            listofsofttodel.append(sw1)


    #print listofsofttodel

    ed=#raw_input("To delete tagged malicious softwares, Press 1 and enter key: ")
    if ed=='1':
        #print 'deleting...'
        for jk in listofsofttodel:
            try:
                os.system('del /f '+jk)
                #print 'DELETED: '+jk
            except Exception as ex:
                #print ex
"""

import ctypes
import threading

class myThread (threading.Thread):

    def __init__(self,name):
        threading.Thread.__init__(self)
        self.name = name
    def run(self):
        executeforensics(self.name)
        
# info1: procmon should delete the malware as soon as he finds it, this code is pending as of now 
# info2: sysmon is processed simulataneously and when procmon is done with his work, sysmon tree is processed to kill the malware and its parent 
# handles : it should get the handles but should wait for the procmon to set flag whether it was able to delete the malware

def executeforensics(name):
    global deletedbyprocmon,deletedbyhandles
    if name=='procmon':
        #print 'going in prcheck'
        prcheck()
        #print 'back from prcheck'
        #raw_input('8888')
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'
        #print 'returned from procmon...'

        if deletedbyprocmon!=1:
            deletedbyprocmon=2 # 2 tells that procmon failed to deinfect, now handles will try
        else:
            #os.system(r'start C:\windows\explorer.exe')
            deletedbyprocmon=5# success by procmon
            pass
        #print deletedbyprocmon,'deletedbyprocmon'
        pass
    if name=='sysmon':
        #print 'creating sysmon logs..'
        try:
            initiatesysmon()
        except Exception as ex:
            #print ex
            #print '86..86...'
            pass
        pass
    if name=='handles':
        #print 'creating handles logs..'
        initiatehandles()
        if deletedbyhandles!=1:
            #print 'handles failed..'
            deletedbyhandles=2 # 2 tells that handles also failed, so mftprocessing please help
        else:
            deletedbyhandles=5 # success by handles..
            #os.system(r'start C:\windows\explorer.exe')
            #print 'handles successed'
            pass
    if name=='deletetop5sysmon':
        deletetop5sysmon()
        pass
def takeautorunlist():
    os.system(r'C:\ransomtesting\internals'+os.sep+'autorunsc.exe -a * * /accepteula > '+r'C:\ransomtesting'+os.sep+'infectedauto.exe')
    

def deinfectautoruns():
    global gofordeinfection
    time.sleep(20)
    takeautorunlist()
    try:
        #os.system(r'C:\ransomtesting\internals'+os.sep+'autorunsc.exe -a /accepteula > '+r'C:\ransomtesting'+os.sep+'infectedauto.exe')

        commdate='date /T'
        output = subprocess.check_output(commdate,shell=True)
        commtime='time /T'
        output = output.replace('\r\n','')
        nowdate= output
        output = output+'___'+subprocess.check_output(commtime,shell=True)
        output = output.replace('\r\n','')


        def calculatedatediff(y1,m1,d1,y2,m2,d2):
            from datetime import date
            d0 = date(y1, m1, d1)
            d1 = date(y2, m2, d2)
            delta = d1 - d0
            return int(delta.days)
            pass

        # check if 2ndwhitelist date is around 10 dat\ys before than today, then deinfect using that

        if os.path.exists(r"C:\ransomtesting"+os.sep+'concurrenttime.exe')==False: # this means only first whitelist is available
            # 
            #takeautorunlist()

            fv1=open(r"C:\ransomtesting"+os.sep+'infectedauto.exe','r')
            fv1s=fv1.read()
            fv1.close()


            fv2=open(r"C:\ransomtesting"+os.sep+'the1stwhitelistauto.exe','r')
            fv2s=fv2.read()
            fv2.close()



            import string
            printable = set(string.printable)
            fv1s=filter(lambda x: x in printable,fv1s)
            fv2s=filter(lambda x: x in printable,fv2s)
            #fv1s=fv1s.split('\r\n')# infected one
            #fv2s=fv1s.split('\r\n')

            listofsofttodel=[]

            fv1s=fv1s.split('\r\n')
            fv2s=fv2s.split('\r\n')

            fv1snospace=[]
            fv2snospace=[]

            for sw1 in fv1s:
                fv1snospace.append(sw1.lstrip())

            for sw1 in fv2s:
                fv2snospace.append(sw1.lstrip())


            for sw1 in fv1snospace:
                if sw1.startswith('c:'+os.sep) and sw1 not in fv2snospace:
                    sw1=sw1.replace('\r\n','')
                    sw1=sw1.strip()
                    listofsofttodel.append(sw1)


            #print listofsofttodel

            for jk in listofsofttodel:
                try:
                    jk.index('.exe')
                    quarantinebyname(jk)
                except Exception as ex:
                    #print ex
                    #print '87..87..'
                    pass

        else: # need to check 2nd whitelist creation time
            #takeautorunlist()

            fv1=open(r"C:\ransomtesting"+os.sep+'the2ndwhitelistauto.exe','r')
            fv1s=fv1.read()
            fv1.close()


            fv2=open(r"C:\ransomtesting"+os.sep+'the1stwhitelistauto.exe','r')
            fv2s=fv2.read()
            fv2.close()



            import string
            printable = set(string.printable)
            fv1s=filter(lambda x: x in printable,fv1s)
            fv2s=filter(lambda x: x in printable,fv2s)
            #fv1s=fv1s.split('\r\n')# infected one
            #fv2s=fv1s.split('\r\n')

            listofsofttodel=[]

            fv1s=fv1s.split('\r\n')
            fv2s=fv2s.split('\r\n')

            fv1snospace=[]
            fv2snospace=[]

            for sw1 in fv1s:
                fv1snospace.append(sw1.lstrip())

            for sw1 in fv2s:
                fv2snospace.append(sw1.lstrip())


            for sw1 in fv1snospace:
                if sw1.startswith('c:'+os.sep) and sw1 not in fv2snospace:
                    sw1=sw1.replace('\r\n','')
                    sw1=sw1.strip()
                    listofsofttodel.append(sw1)


            #print listofsofttodel

            
            for jk in listofsofttodel:
                try:
                    jk.index('.exe')
                    quarantinebyname(jk)
                except Exception as ex:
                    #print ex
                    #print '888..888..'
                    pass
    except Exception as ex:
        #print ex
        #print '89.8989..'
        ##raw_input('---------------------')
        pass
    pass
### code will come here that will hint malware detected
#TODO or call mainc(), i guess mainc will be better
######################################################
def mainc():
    getsafepid()
    global normaldeletionbyhandles
    ##raw_input('check procmon, handle are in correct place for now....')
    #valfromhandles=0
    #valfromhandles=initiatehandles()
    threadLock = threading.Lock()
    threads = []

    thread3 = myThread("handles")
    thread3.start()
    threads.append(thread3)
    thread2 = myThread("sysmon")
    thread2.start()
    threads.append(thread2)

    #raw_input('66666')



    
    #if valfromhandles==1 or valfromhandles==0: # for now, not stopping the progress, but will remove 0 afterwards, if it screw me
    while True:
        #print normaldeletionbyhandles,'normaldeletionbyhandles'
        time.sleep(2)
        if normaldeletionbyhandles==1:
            #threadLock = threading.Lock()
            #threads = []

            # Create new threads
            thread1 = myThread("procmon")
            #thread2 = myThread("sysmon")
            #thread3 = myThread("handles")
            thread4 = myThread("deletetop5sysmon")


            # Start new Threads
            thread1.start()
            #thread2.start()
            #thread3.start()
            thread4.start()



            # Add threads to thread list
            threads.append(thread1)
            #threads.append(thread2)
            #threads.append(thread3)
            threads.append(thread4)

            # Wait for all threads to complete
            for t in threads:
                t.join()
            #print "Exiting Main Thread"
            #raw_input('77777')
            try:
                os.system(r'start c:\windows\explorer.exe')
            except Exception as ex:
                #print ex
                #print '9090..90'
                pass
            #placesignedthingsback()
            
            try:
                for km in range(0,5):
                    print km,'km'
                    pass
                    badfileskill()
                    time.sleep(5)
                    pass
            except Exception as ex:
                print ex
                print 'lolol..'
                pass

            try:
                dfcx=str(os.getpid()) # kill myself
                #os.system('taskkill.exe /pid '+dfcx+' /F') # uncomment it later
                #print 'taskkill.exe /pid '+dfcx+' /F','some dfcx'
                sys.exit(0)

            except Exception as ex:
                #print ex
                #print '919..919'
                sys.exit(0)
                pass

            



            #deinfectautoruns()
            sys.exit(0)
        else:
            time.sleep(3)

    

    pass